---
- name: Create
  hosts: local
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  vars:
    ssh_user: ec2-user
    ssh_port: 22
    region: us-east-1
    security_group_name: molecule
    security_group_description: Security group for testing Molecule
    security_group_rules:
      - proto: tcp
        from_port: "{{ ssh_port }}"
        to_port: "{{ ssh_port }}"
        cidr_ip: '0.0.0.0/0'
      - proto: icmp
        from_port: 8
        to_port: -1
        cidr_ip: '0.0.0.0/0'
      - proto: tcp
        from_port: 80
        to_port  : 80
        cidr_ip  : 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port  : 443
        cidr_ip  : 0.0.0.0/0
    security_group_rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
    
    key_pair_name: molecule_key
    key_pair_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"
  tasks:
    - name: Create security groups
      ec2_group:
        name: "{{ security_group_name }}"
        description: "{{ security_group_name }}"
        rules: "{{ security_group_rules }}"
        rules_egress: "{{ security_group_rules_egress }}"

    - name: Test for presence of local key pair
      stat:
        path: "{{ key_pair_path }}"
      register: key_pair_local

    - name: Delete remote key pair
      ec2_key:
        name: "{{ key_pair_name }}"
        state: absent
      when: not key_pair_local.stat.exists

    - name: Create key pair
      ec2_key:
        name: "{{ key_pair_name }}"
      register: key_pair

    - name: Persist the key pair
      copy:
        dest: "{{ key_pair_path }}"
        content: "{{ key_pair.key.private_key }}"
        mode: 0400
      when: key_pair.changed

    - name: Get the ec2 ami(s) by owner and name, if image not set
      ec2_ami_info:
        owners: "{{ item.image_owner }}"
        filters:
          name: "{{ item.image_name }}"
      loop: "{{ molecule_yml.platforms }}"
      when: item.image is not defined
      register: ami_info

    - name: Make test molecule instance
      ec2:
        key_name: "{{ key_pair_name }}"
        image: "{{ image }}"
        instance_type: "{{ item.instance_type }}"
        group: "{{ security_group_name }}"
        region: "{{ region }}"
        instance_tags: "{{ item.instance_tags | combine({'instance': item.name})
          if item.instance_tags is defined
          else {'instance': item.name} }}"
        wait: true
        exact_count: 1
        count_tag:
          instance: "{{ item.name }}"
      register: server
      loop: "{{ molecule_yml.platforms }}"
#      loop_control:
#        index_var: index
      async: 7200
      poll: 0

    - name: Wait for instance(s) creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: ec2_jobs
      until: ec2_jobs.finished
      retries: 300
      with_items: "{{ server.results }}"

    # Mandatory configuration for Molecule to function.

    - name: Populate instance config dict
      set_fact:
        instance_conf_dict: {
          'instance': "{{ item.instances[0].tags.instance }}",
          'address': "{{ item.instances[0].public_ip }}",
          'user': "{{ ssh_user }}",
          'port': "{{ ssh_port }}",
          'identity_file': "{{ key_pair_path }}",
          'instance_ids': "{{ item.instance_ids }}", }
      with_items: "{{ ec2_jobs.results }}"
      register: instance_config_dict
      when: ec2_jobs.changed | bool

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      when: server.changed | bool

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | to_yaml }}"
        dest: "{{ molecule_instance_config }}"
      when: server.changed | bool

    - name: Wait for SSH
      wait_for:
        port: "{{ ssh_port }}"
        host: "{{ item.address }}"
        search_regex: SSH
        delay: 10
        timeout: 320
      with_items: "{{ lookup('file', molecule_instance_config) | from_yaml }}"

    - name: Install Apache
      command: 'yum -y install httpd'

    - name: Start Apache service
      command: systemctl start httpd

    - name: Install firewalld
      raw: yum -y install {{ item }}
      with_items:
        - firewalld
        - ipset

    - name: Copy page from GitHub
      get_url:
        url: https://raw.githubusercontent.com/DomenZero/autorist/master/public_html/index.html
        dest: "/var/www/html/index.html"

    - name: Start httpd services
      service:
        name: httpd
        state: started
        
    - name: Wait for boot process to finish
      pause:
        minutes: 3
